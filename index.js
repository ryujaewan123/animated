const _0x1 = _0x2;
(function (_0x3, _0x4) {
    const _0x5 = _0x2, _0x6 = _0x3();
    while (!![]) {
        try {
            const _0x7 = -parseInt(_0x5(0xc6)) / 0x1 + parseInt(_0x5(0xc7)) / 0x2 * (parseInt(_0x5(0xc8)) / 0x3) + parseInt(_0x5(0xc9)) / 0x4 * (-parseInt(_0x5(0xca)) / 0x5) + -parseInt(_0x5(0xcb)) / 0x6 + -parseInt(_0x5(0xcc)) / 0x7 * (-parseInt(_0x5(0xcd)) / 0x8) + parseInt(_0x5(0xce)) / 0x9 * (-parseInt(_0x5(0xcf)) / 0xa) + parseInt(_0x5(0xd0)) / 0xb * (parseInt(_0x5(0xd1)) / 0xc);
            if (_0x7 === _0x4)
                break;
            else
                _0x6['push'](_0x6['shift']());
        } catch (_0x8) {
            _0x6['push'](_0x6['shift']());
        }
    }
}(_0x9, 0xf0e65));
const _0x10 = [
    _0x1(0xd2),
    _0x1(0xd3),
    _0x1(0xd4) + 'e',
    _0x1(0xd5),
    _0x1(0xd6),
    _0x1(0xd7),
    _0x1(0xd8),
    _0x1(0xd9),
    _0x1(0xda),
    _0x1(0xdb),
    _0x1(0xdc),
    _0x1(0xdd),
    _0x1(0xde),
    _0x1(0xdf),
    _0x1(0xe0),
    _0x1(0xe1),
    _0x1(0xe2),
    _0x1(0xe3) + _0x1(0xe4),
    _0x1(0xe5),
    _0x1(0xe6),
    _0x1(0xe7),
    'to',
    _0x1(0xe8),
    _0x1(0xe9),
    _0x1(0xea)
];
import _0x11, {
    useEffect,
    useRef,
    useState
} from 'react';
function _0x12({
    [_0x10[0x0]]: _0x13,
    [_0x10[0x1]]: _0x14,
    [_0x10[0x2]]: _0x15,
    [_0x10[0x3]]: _0x16 = ''
}) {
    const _0x17 = _0x1, _0x18 = _0x14[_0x17(0xeb)] - 0x1;
    if (_0x13 < _0x14[0x0]) {
        const _0x19 = _0x14[0x1] - _0x14[0x0], _0x20 = _0x15[0x1] - _0x15[0x0], _0x21 = _0x20 / _0x19;
        return _0x15[0x0] + _0x21 * (_0x13 - _0x14[0x0]) + _0x16;
    } else {
        if (_0x13 > _0x14[_0x18]) {
            const _0x22 = _0x14[_0x18] - _0x14[_0x18 - 0x1], _0x23 = _0x15[_0x18] - _0x15[_0x18 - 0x1], _0x24 = _0x23 / _0x22;
            return _0x15[_0x18] + _0x24 * (_0x13 - _0x14[_0x18]) + _0x16;
        }
    }
    for (let _0x25 = 0x0; _0x25 < _0x18; _0x25++) {
        if (_0x13 >= _0x14[_0x25] && _0x13 <= _0x14[_0x25 + 0x1]) {
            const _0x26 = _0x14[_0x25 + 0x1] - _0x14[_0x25], _0x27 = _0x15[_0x25 + 0x1] - _0x15[_0x25], _0x28 = (_0x13 - _0x14[_0x25]) / _0x26;
            return _0x15[_0x25] + _0x28 * _0x27 + _0x16;
        }
    }
    return null;
}
export const Easing = {
    [_0x10[0x4]]: _0x29 => _0x29,
    [_0x10[0x5]]: _0x30 => _0x30 * _0x30,
    [_0x10[0x6]]: _0x31 => 0x1 - (0x1 - _0x31) * (0x1 - _0x31),
    [_0x10[0x7]]: _0x32 => _0x32 < 0.5 ? 0x2 * _0x32 * _0x32 : 0x1 - Math[_0x1(0xec)](-0x2 * _0x32 + 0x2, 0x2) / 0x2,
    [_0x10[0x8]]: _0x33 => Math[_0x1(0xec)](_0x33, 0x3),
    [_0x10[0x9]]: _0x34 => 0x1 - Math[_0x1(0xec)](0x1 - _0x34, 0x3),
    [_0x10[0xa]]: _0x35 => _0x35 < 0.5 ? 0x4 * _0x35 * _0x35 * _0x35 : 0x1 - Math[_0x1(0xec)](-0x2 * _0x35 + 0x2, 0x3) / 0x2,
    [_0x10[0xb]]: _0x36 => _0x36 * _0x36 * _0x36 * _0x36,
    [_0x10[0xc]]: _0x37 => 0x1 - Math[_0x1(0xec)](0x1 - _0x37, 0x4),
    [_0x10[0xd]]: _0x38 => _0x38 < 0.5 ? 0x8 * _0x38 * _0x38 * _0x38 * _0x38 : 0x1 - Math[_0x1(0xec)](-0x2 * _0x38 + 0x2, 0x4) / 0x2,
    [_0x10[0xe]]: _0x39 => _0x39 * _0x39 * _0x39 * _0x39 * _0x39,
    [_0x10[0xf]]: _0x40 => 0x1 - Math[_0x1(0xec)](0x1 - _0x40, 0x5),
    [_0x10[0x10]]: _0x41 => _0x41 < 0.5 ? 0x10 * _0x41 * _0x41 * _0x41 * _0x41 * _0x41 : 0x1 - Math[_0x1(0xec)](-0x2 * _0x41 + 0x2, 0x5) / 0x2,
    [_0x10[0x11]]: _0x42 => -(Math[_0x1(0xed)](Math['PI'] * _0x42) - 0x1) / 0x2
};
function _0x2(_0x43, _0x44) {
    const _0x998 = _0x9();
    return _0x2 = function (_0x200, _0x47) {
        _0x200 = _0x200 - 0xc6;
        let _0x48 = _0x998[_0x200];
        return _0x48;
    }, _0x2(_0x43, _0x44);
}
function _0x49(_0x50) {
    const _0x51 = _0x1;
    _0x50 = _0x50 || _0x51(0xee);
    function _0x52(_0x53) {
        const _0x54 = _0x51;
        let _0x55 = {};
        if (_0x53[_0x54(0xe6)] && typeof _0x53[_0x54(0xe6)] === _0x54(0xef)) {
            _0x55 = { ..._0x53[_0x54(0xe6)] };
            for (let _0x56 in _0x55) {
                if (Array[_0x54(0xf0)](_0x55[_0x56])) {
                    let _0x57 = [];
                    _0x55[_0x56][_0x54(0xf1)]((_0x58, _0x59) => {
                        const _0x60 = _0x54;
                        if (_0x58) {
                            let _0x61 = Object[_0x60(0xf2)](_0x58)[0x0], _0x62 = _0x58[_0x61];
                            _0x57[_0x60(0xf3)](_0x61 + _0x60(0xf4) + _0x62[_0x60(0xe7)] + '))');
                        }
                    }), console[_0x54(0xf5)](_0x57), _0x55[_0x56] = _0x57[_0x54(0xf6)]('\x20');
                } else
                    _0x55[_0x56]?.[_0x54(0xf7) + 'Of']?.() === _0x54(0xf8) + _0x54(0xf9) && (_0x55[_0x56] = _0x54(0xfa) + _0x55[_0x56][_0x54(0xe7)] + ')');
            }
        }
        let _0x63 = [];
        if (_0x53[_0x54(0xe5)]) {
            if (typeof _0x53[_0x54(0xe5)] === _0x54(0xfb))
                _0x63 = _0x53[_0x54(0xe5)][_0x54(0xfc)]('\x20')[_0x54(0xfd)](_0x64 => _0x64);
            else
                Array[_0x54(0xf0)](_0x53[_0x54(0xe5)]) && (_0x63 = _0x53[_0x54(0xe5)][_0x54(0xfd)](_0x65 => _0x65));
        }
        return _0x11[_0x54(0xfe) + _0x54(0xff)](_0x50, {
            ..._0x53,
            [_0x10[0x12]]: _0x63[_0x54(0xf6)]('\x20'),
            [_0x10[0x13]]: _0x55
        }, _0x53[_0x54(0x100)]);
    }
    return _0x52;
}
function _0x66(_0x67, _0x68) {
    const _0x69 = _0x1;
    if (!_0x68)
        return _0x67;
    return _0x12({
        [_0x10[0x0]]: _0x67,
        [_0x10[0x1]]: _0x68[_0x69(0xd3)],
        [_0x10[0x2]]: _0x68[_0x69(0xd4) + 'e'],
        [_0x10[0x3]]: _0x68[_0x69(0xd5)]
    });
}
export const animated = {
    'useAnimatedValue'(_0x70, _0x71) {
        const _0x72 = _0x1;
        let _0x73 = useRef(_0x72(0x101) + _0x72(0x102) + Math[_0x72(0x103)]()[_0x72(0x104)](0x24)[_0x72(0x105)](0x2))[_0x72(0x106)], _0x74 = useRef([])[_0x72(0x106)], _0x75 = useRef(![]), _0x76 = useRef(_0x66(_0x70?.[_0x72(0xf7) + 'Of']?.() === _0x72(0xf8) + _0x72(0xf9) ? _0x70[_0x72(0x107)]() : _0x70, _0x71));
        useEffect(() => {
            const _0x77 = _0x72;
            return _0x70?.[_0x77(0xf7) + 'Of']?.() === _0x77(0xf8) + _0x77(0xf9) && _0x70[_0x77(0x108) + _0x77(0x109)](_0x78), document[_0x77(0x10a) + _0x77(0x10b)][_0x77(0xe6)][_0x77(0x10c) + 'y'](_0x73, _0x76[_0x77(0x106)]), _0x70?.[_0x77(0xf7) + 'Of']?.() === _0x77(0xf8) + _0x77(0xf9) && (delete _0x78[_0x77(0x10d) + _0x77(0x10e)], delete _0x78[_0x77(0x10f)]), () => {
                const _0x79 = _0x77;
                _0x70?.[_0x79(0xf7) + 'Of']?.() === _0x79(0xf8) + _0x79(0xf9) && _0x70[_0x79(0x110) + _0x79(0x111) + _0x79(0x112)](_0x78), document[_0x79(0x10a) + _0x79(0x10b)][_0x79(0xe6)][_0x79(0x113) + _0x79(0x114)](_0x73), _0x75[_0x79(0x106)] = !![];
            };
        }, []);
        let _0x80 = useRef(null);
        const _0x81 = (_0x82, _0x83 = !![]) => {
            const _0x84 = _0x72;
            _0x83 && clearInterval(_0x80[_0x84(0x106)]);
            if (_0x75[_0x84(0x106)])
                return;
            _0x82 = _0x66(_0x82, _0x71), _0x76[_0x84(0x106)] = _0x82, document[_0x84(0x10a) + _0x84(0x10b)][_0x84(0xe6)][_0x84(0x10c) + 'y'](_0x73, _0x76[_0x84(0x106)]), _0x74[_0x84(0xf1)](_0x85 => {
                const _0x86 = _0x84;
                _0x85[_0x86(0x115)](_0x82, _0x83);
            });
        };
        let _0x78 = useRef({
            [Symbol[_0x72(0x116) + 'e']](_0x87) {
                const _0x88 = _0x72;
                return _0x76[_0x88(0x106)];
            },
            'toString'() {
                const _0x89 = _0x72;
                return _0x76[_0x89(0x106)] + '';
            },
            'symbolTypeOf'() {
                const _0x90 = _0x72;
                return _0x90(0xf8) + _0x90(0xf9);
            },
            'addInterpolateTarget'(_0x91) {
                const _0x92 = _0x72;
                _0x74[_0x92(0xf3)](_0x91);
            },
            'removeInterpolateTarget'(_0x93) {
                const _0x94 = _0x72;
                let _0x95 = _0x74[_0x94(0x117)](_0x93);
                _0x95 !== -0x1 && _0x74[_0x94(0x118)](_0x95, 0x1);
            },
            [_0x10[0x14]]: _0x73,
            'setValue'(_0x96, _0x97 = !![]) {
                _0x81(_0x96, _0x97);
            },
            'getValue'() {
                const _0x98 = _0x72;
                return _0x76[_0x98(0x106)];
            },
            'timing'({
                [_0x10[0x15]]: _0x99,
                [_0x10[0x16]]: _0x100,
                [_0x10[0x17]]: _0x101 = 0x78,
                [_0x10[0x18]]: _0x102 = Easing[_0x72(0xd6)]
            }) {
                const _0x103 = _0x72;
                let _0x104 = performance[_0x103(0x119)](), _0x105 = _0x76[_0x103(0x106)];
                return {
                    'start'(_0x106) {
                        const _0x107 = _0x103;
                        clearInterval(_0x80[_0x107(0x106)]), _0x80[_0x107(0x106)] = setInterval(() => {
                            const _0x108 = _0x107;
                            let _0x109 = performance[_0x108(0x119)](), _0x110 = Math[_0x108(0x11a)](0x1, (_0x109 - _0x104) / _0x100), _0x111 = _0x105 + (_0x99 - _0x105) * _0x102(_0x110);
                            _0x81(_0x111, ![]), _0x110 === 0x1 && (clearInterval(_0x80[_0x108(0x106)]), _0x106 && _0x106());
                        }, 0x3e8 / _0x101);
                    },
                    'stop'() {
                        const _0x112 = _0x103;
                        clearInterval(_0x80[_0x112(0x106)]);
                    }
                };
            },
            'stopAnimation'() {
                const _0x113 = _0x72;
                clearInterval(_0x80[_0x113(0x106)]);
            }
        })[_0x72(0x106)];
        return _0x78;
    }
};
const _0x114 = [
    _0x1(0xee),
    _0x1(0x11b),
    'p',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    _0x1(0x11c),
    'a',
    _0x1(0x11d),
    'ul',
    'ol',
    'li'
];
for (let _0x115 of _0x114) {
    animated[_0x115] = _0x116 => {
        let _0x117 = _0x49(_0x115);
        return _0x117(_0x116);
    };
}
export const useAnimatedValue = animated[_0x1(0x11e) + _0x1(0x11f)];
function _0x9() {
    const _0x118 = [
        'easeOut',
        'easeInOut',
        'easeIn3',
        'easeOut3',
        'easeInOut3',
        'easeIn4',
        'easeOut4',
        'easeInOut4',
        'easeIn5',
        'easeOut5',
        'easeInOut5',
        'easeInOutS',
        'ine',
        'className',
        'style',
        'rootValue',
        'duration',
        'fps',
        'easing',
        'length',
        'pow',
        'cos',
        'div',
        'object',
        'isArray',
        'forEach',
        'keys',
        'push',
        '(var(',
        'log',
        'join',
        'symbolType',
        'animatedVa',
        'lue',
        'var(',
        'string',
        'split',
        'filter',
        'createElem',
        'ent',
        'children',
        '--animated',
        '-value-',
        'random',
        'toString',
        'substring',
        'current',
        'getValue',
        'addInterpo',
        'lateTarget',
        'documentEl',
        'ement',
        'setPropert',
        'stopAnimat',
        'ion',
        'timing',
        'removeInte',
        'rpolateTar',
        'get',
        'removeProp',
        'erty',
        'setValue',
        'toPrimitiv',
        'indexOf',
        'splice',
        'now',
        'min',
        'span',
        'button',
        'img',
        'useAnimate',
        'dValue',
        '1163989MgjWAp',
        '314DfjBST',
        '32001YVXoHN',
        '184vyEZEK',
        '107335OOXkTn',
        '931206zArWfB',
        '21497GiTanA',
        '1600zeVUis',
        '15587577nbLIzS',
        '10zRUQeZ',
        '30100741ITwVuR',
        '12vVuFHF',
        'value',
        'inputRange',
        'outputRang',
        'suffix',
        'linear',
        'easeIn'
    ];
    _0x9 = function () {
        return _0x118;
    };
    return _0x9();
}